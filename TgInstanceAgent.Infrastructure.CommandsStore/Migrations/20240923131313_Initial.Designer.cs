// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TgInstanceAgent.Infrastructure.CommandsStore.Context;

#nullable disable

namespace TgInstanceAgent.Infrastructure.CommandsStore.Migrations
{
    [DbContext(typeof(CommandsDbContext))]
    [Migration("20240923131313_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddForwardEntryCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<long>("For")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendCopy")
                        .HasColumnType("boolean");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.HasKey("CommandId");

                    b.ToTable("AddForwardEntryCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddInstanceCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CommandId");

                    b.ToTable("AddInstanceCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddWebhookUrlCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommandId");

                    b.ToTable("AddWebhookUrlCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveForwardEntryCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<long>("For")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendCopy")
                        .HasColumnType("boolean");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.HasKey("CommandId");

                    b.ToTable("RemoveForwardEntryCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveWebhookUrlCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommandId");

                    b.ToTable("RemoveWebhookUrlCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.StartInstanceCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.HasKey("CommandId");

                    b.ToTable("StartInstanceCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.StopInstanceCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.HasKey("CommandId");

                    b.ToTable("StopInstanceCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.UpdateWebhookSettingCommand", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Chats")
                        .HasColumnType("boolean");

                    b.Property<bool>("Files")
                        .HasColumnType("boolean");

                    b.Property<bool>("Messages")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<bool>("Stories")
                        .HasColumnType("boolean");

                    b.Property<bool>("Users")
                        .HasColumnType("boolean");

                    b.HasKey("CommandId");

                    b.ToTable("UpdateWebhookSettingCommands");
                });

            modelBuilder.Entity("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", b =>
                {
                    b.Property<Guid>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CommandId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddForwardEntryCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("AddForwardEntryCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddForwardEntryCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddInstanceCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("AddInstanceCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddInstanceCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddWebhookUrlCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("AddWebhookUrlCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.AddWebhookUrlCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveForwardEntryCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("RemoveForwardEntryCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveForwardEntryCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveWebhookUrlCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("RemoveWebhookUrlCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.RemoveWebhookUrlCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.StartInstanceCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("StartInstanceCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.StartInstanceCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.StopInstanceCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("StopInstanceCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.StopInstanceCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Application.Abstractions.Commands.Instances.UpdateWebhookSettingCommand", b =>
                {
                    b.HasOne("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", null)
                        .WithOne("UpdateWebhookSettingCommand")
                        .HasForeignKey("TgInstanceAgent.Application.Abstractions.Commands.Instances.UpdateWebhookSettingCommand", "CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TgInstanceAgent.Infrastructure.CommandsStore.Entities.CommandModel", b =>
                {
                    b.Navigation("AddForwardEntryCommand");

                    b.Navigation("AddInstanceCommand");

                    b.Navigation("AddWebhookUrlCommand");

                    b.Navigation("RemoveForwardEntryCommand");

                    b.Navigation("RemoveWebhookUrlCommand");

                    b.Navigation("StartInstanceCommand");

                    b.Navigation("StopInstanceCommand");

                    b.Navigation("UpdateWebhookSettingCommand");
                });
#pragma warning restore 612, 618
        }
    }
}
